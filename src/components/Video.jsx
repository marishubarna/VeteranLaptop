import React, { useState, useEffect } from "react";
import "../components/styles/Video.css";

const Video = () => {
  const [selectedFile, setSelectedFile] = useState(() => {
    const saved = localStorage.getItem("savedVideo");
    return saved ? JSON.parse(saved) : null;
  });
  const [dragActive, setDragActive] = useState(false);

  useEffect(() => {
    if (selectedFile) {
      const videoData = {
        name: selectedFile.name,
        size: selectedFile.size,
        type: selectedFile.type,
        lastModified: selectedFile.lastModified,
      };
      localStorage.setItem("savedVideo", JSON.stringify(videoData));
    }
  }, [selectedFile]);

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);

    const file = e.dataTransfer.files[0];
    if (file && file.type.startsWith("video/")) {
      setSelectedFile(file);
    }
  };

  const handleFileSelect = (e) => {
    const file = e.target.files[0];
    if (file && file.type.startsWith("video/")) {
      setSelectedFile(file);
    }
  };

  const handleRemoveVideo = () => {
    setSelectedFile(null);
    localStorage.removeItem("savedVideo");
  };

  return (
    <div className="VideoSection">
      <div className="VideoUpLoadContainer">
        <div
          className={`TextContainer ${dragActive ? "drag-active" : ""}`}
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDragOver={handleDrag}
          onDrop={handleDrop}
        >
          <label htmlFor="video-upload" className="upload-label">
            <span className="SpanVideo">üé•</span>
            <h1 className="HeaderVideo">
              {selectedFile ? selectedFile.name : "–í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è —É—Å–ø—ñ—Ö—É —Ç—É—Ç"}
            </h1>
            <p className="paragrafVideo">
              {selectedFile ? (
                <>
                  {`–§–∞–π–ª –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (${(
                    selectedFile.size /
                    (1024 * 1024)
                  ).toFixed(2)} MB)`}
                  <button onClick={handleRemoveVideo} className="remove-video">
                    –í–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥–µ–æ
                  </button>
                </>
              ) : (
                "–¶–µ–π –±–ª–æ–∫ —á–µ–∫–∞—î –Ω–∞ –≤–∞—à–µ –≤—ñ–¥–µ–æ! –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –º–æ–º–µ–Ω—Ç–æ–º, –∫–æ–ª–∏ –≤–∞—à –Ω–æ—É—Ç–±—É–∫ –∑–Ω–∞–π—à–æ–≤ –Ω–æ–≤–æ–≥–æ –≤–ª–∞—Å–Ω–∏–∫–∞ —ñ —Å—Ç–∞–≤ —á–∞—Å—Ç–∏–Ω–æ—é —á–∏–π–æ–≥–æ—Å—å –Ω–æ–≤–æ–≥–æ –ø–æ—á–∞—Ç–∫—É. –í–∞—à –¥–æ—Å–≤—ñ–¥ –º–æ–∂–µ –Ω–∞–¥–∏—Ö–Ω—É—Ç–∏ —ñ–Ω—à–∏—Ö –∑—Ä–æ–±–∏—Ç–∏ —Å–≤—ñ–π –≤–Ω–µ—Å–æ–∫!"
              )}
            </p>
            <input
              type="file"
              id="video-upload"
              accept="video/*"
              onChange={handleFileSelect}
              className="file-input"
              hidden
            />
          </label>
        </div>
      </div>
      <div className="VideoInstruction">
        <div className="InstructionContainer">
          <h1 className="InstructionHeader">–ü–æ–¥—ñ–ª–∏—Å—è —Å–≤–æ—î—é —ñ—Å—Ç–æ—Ä—ñ—î—é —É—Å–ø—ñ—Ö—É!</h1>
          <p className="InstructionParagraf">
            –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä—à–∏–º —É—á–∞—Å–Ω–∏–∫–æ–º, —á–∏—è —ñ—Å—Ç–æ—Ä—ñ—è –Ω–∞–¥–∏—Ö–Ω–µ —ñ–Ω—à–∏—Ö! –†–æ–∑–∫–∞–∂—ñ—Ç—å, —è–∫
            –≤–∞—à –Ω–æ—É—Ç–±—É–∫ –¥–æ–ø–æ–º—ñ–≥ –≤–µ—Ç–µ—Ä–∞–Ω—É –∑—Ä–æ–±–∏—Ç–∏ –∫—Ä–æ–∫ –¥–æ –Ω–æ–≤–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π.
          </p>
          <div className="SignUpDisplay">
            <button className="SignUp">–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è</button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Video;
